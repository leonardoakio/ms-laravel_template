services:
    application:
        container_name: template_app
        restart: unless-stopped
        build: ./
        entrypoint: ./.docker/entrypoint.sh
#        environment:
#            - DB_HOST=template_postgresql
#            - DB_DATABASE=template
#            - DB_USERNAME=root
#            - DB_PASSWORD=Lfp6w7sIp1lf
        volumes:
            - ./:/var/www

            # nginx pools configuration
            - ./.docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
            - ./.docker/nginx/microservices.conf:/etc/nginx/conf.d/microservices.conf

            # php-fpm socket
            - "phpsocket:/var/run"
        ports:
            - 9500:9500
        networks:
            - application-network
        depends_on:
            mysql:
                condition: service_healthy
            redis:
                condition: service_started

    nginx:
        container_name: template_nginx
        image: nginx:1.27.3-alpine
        restart: unless-stopped
        volumes:
            - ./:/var/www

            # nginx pools configuration
            - ./.docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
            - ./.docker/nginx/microservices.conf:/etc/nginx/conf.d/microservices.conf

            # php-fpm .conf's
            - ./.docker/php-fpm/www.conf:/usr/local/etc/php-fpm.d/www.conf
            - ./.docker/php-fpm/zz-docker.conf:/usr/local/etc/php-fpm.d/zz-docker.conf

            # php-fpm socket
            - "phpsocket:/var/run"
        ports:
            - "8001:80" # http
            # - "8443:443" # https
        networks:
            - application-network
        depends_on:
            - application

    mysql:
        container_name: template_mysql
        image: mysql:8.4
        restart: always
        volumes:
            - mysql_data:/var/lib/mysql
            - ./.docker/mysql/logs:/var/log/mysql
        env_file:
            - ./.docker/mysql/mysql.env
        healthcheck:
            test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}" ]
            interval: 5s
            timeout: 5s
            retries: 5
        ports:
            - "3306:3306"
        networks:
            - application-network

#    postgresql:
#        container_name: template_postgresql
#        image: postgres:17.2-alpine
#        restart: always
#        volumes:
#            - postgresql_data:/var/lib/postgresql/data
#            - ./.docker/postgresql/logs:/var/log/postgresql
#        env_file:
#            - ./.docker/postgresql/postgresql.env
#        healthcheck:
#            test: [ "CMD-SHELL", "pg_isready -U root -d template" ]
#            interval: 5s
#            timeout: 5s
#            retries: 5
#        ports:
#            - "5432:5432"
#        networks:
#            - application-network

#    mongo:
#        container_name: template_mongo
#        image: mongo:7.0
#        restart: always
#        volumes:
#            - mongo_data:/data/db
#            - mongo_db_config:/data/configdb
#            - ./.docker/mongodb/logs:/var/log/mongodb
#        environment:
#            - TZ=America/Sao_Paulo
#        env_file:
#            - ./.docker/mongodb/mongodb.env
#        healthcheck:
#            test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
#            interval: 5s
#            timeout: 5s
#            retries: 5
#        ports:
#            - "27017:27017"
#        networks:
#            - application-network

#    mongo-express:
#        container_name: mongo-express
#        image: mongo-express:latest
#        restart: always
#        volumes:
#            - ./.docker/mongo-express/data:/data/db
#        ports:
#            - "8081:8081"
#        env_file:
#            - ./.docker/mongo-express/mongo-express.env
#        depends_on:
#            - mongo
#        networks:
#            - application-network

    redis:
        container_name: template_redis
        image: redis:7.2-alpine
        volumes:
            - redis_data:/data
        healthcheck:
            test: [ "CMD", "redis-cli", "ping" ]
            interval: 5s
            timeout: 5s
            retries: 5
        ports:
            - "6379:6379"
        networks:
            - application-network

    metabase:
        container_name: metabase
        build:
            context: ./.docker/metabase
            dockerfile: Dockerfile
        ports:
            - "4000:3000"
        environment:
            - MB_DB_FILE=/metabase/metabase.db
        volumes:
            - ./.docker/metabase/metabase-data:/metabase
            - metabase_data:/metabase
        networks:
            - application-network
        depends_on:
            - mysql

    backup:
        image: jareware/docker-volume-backup
        container_name: backup-volumes
        env_file:
            - ./.docker/backup-volumes/backup-volumes.env
        volumes:
            - mysql_data:/backup/mysql_data:ro                      # Mount the MYSQL data volume (as read-only)
#            - postgresql_data:/backup/postgresql_data:ro            # Mount the POSTGRESQL data volume (as read-only)
#            - mongo_data:/backup/mongo_data:ro                      # Mount the MONGO data volume (as read-only)
#            - mongo_db_config:/backup/mongo_db_config:ro            # Mount the MONGO environment configurations (as read-only)
            - metabase_data:/backup/metabase_data:ro                # Mount the Metabase configurations (as read-only)
            - ./.docker/backup-volumes/backups:/archive             # Mount a local folder as the backup archive
        networks:
            - application-network

volumes:
    mysql_data:
        name: mysql_data
        driver: local
#    postgresql_data:
#        name: postgresql_data
#        driver: local
#    mongo_data:
#        name: mongo_data
#        driver: local
#    mongo_db_config:
#        name: mongo_db_config
#        driver: local
    metabase_data:
        name: metabase_data
        driver: local
    redis_data:
        name: redis_data
        driver: local
    phpsocket:
        name: phpsocket
        driver: local

networks:
    application-network:
        external: true
